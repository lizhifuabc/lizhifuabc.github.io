import{_ as l,o as i,c as a,a as e}from"./app-oJgUVX7T.js";const s="/assets/image-20230915115541458-BvzdNaeW.png",n={},p=e('<h1 id="熔断和降级" tabindex="-1"><a class="header-anchor" href="#熔断和降级"><span>熔断和降级</span></a></h1><p>在高并发环境下，服务之间的依赖关系导致调用失败，解决的方式通常是: 限流-&gt;熔断-&gt;隔离-&gt;降级, 其目的是防止雪崩效应。</p><h2 id="雪崩效应" tabindex="-1"><a class="header-anchor" href="#雪崩效应"><span>雪崩效应</span></a></h2><p><img src="'+s+'" alt="image-20230915115541458"></p><ol><li>服务 D 出现 CPU、内存占用过高等问题，结果导致服务 D 出现延迟、响应过慢</li><li>此时服务 B 一直等待 D 的响应，也会出现请求堆积、资源占用</li><li>慢慢扩散到所有微服务，引发雪崩效应</li></ol><h2 id="常见容错模式" tabindex="-1"><a class="header-anchor" href="#常见容错模式"><span>常见容错模式</span></a></h2><ol><li><p>超时：请求主动设置一个超时时间，超时就直接返回，不会造成服务堆积</p></li><li><p>限流：限制最大并发数</p></li><li><p>熔断：当错误数超过阈值时快速失败，不调用后端服务，同时隔一定时间放几个请求去重试后端服务是否能正常调用，如果成功则关闭熔断状态，失败则继续快速失败，直接返回。（此处有个重试，重试就是弹性恢复的能力）</p></li><li><p>隔离：把每个依赖或调用的服务都隔离开来，防止级联失败引起整体服务不可用</p></li><li><p>降级：服务失败或异常后，返回指定的默认信息</p></li></ol><h2 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级"><span>服务降级</span></a></h2><p>由于爆炸性的流量冲击，对一些服务进行有策略的放弃，以此缓解系统压力，保证目前主要业务的正常运行。它主要是针对非正常情况下的应急服务措施：当此时一些业务服务无法执行时，给出一个统一的返回结果。</p><ul><li>前提：负荷超出整体负载承受能力。</li><li>目的：保证重要或基本服务正常运行，非重要服务延迟使用或暂停使用</li><li>大小：降低服务粒度，要考虑整体模块粒度的大小，将粒度控制在合适的范围内</li><li>可控性：在服务粒度大小的基础上增加服务的可控性，后台服务开关的功能是一项必要配置（单机可配置文件，其他可使用数据库和缓存），可分为手动控制和自动控制。</li><li>次序：一般从外围延伸服务开始降级，需要有一定的配置项，重要性低的优先降级，比如可以分组设置等级1-10，当服务需要降级到某一个级别时，进行相关配置</li></ul><h3 id="降级方式" tabindex="-1"><a class="header-anchor" href="#降级方式"><span>降级方式</span></a></h3><ul><li>延迟服务：比如发表了评论，重要服务，比如在文章中显示正常，但是延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行。</li><li>在粒度范围内关闭服务（片段降级或服务功能降级）：比如关闭相关文章的推荐，直接关闭推荐区</li><li>页面异步请求降级：比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；</li><li>页面跳转（页面降级）：比如可以有相关文章推荐，但是更多的页面则直接跳转到某一个地址</li><li>写降级：比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。</li><li>读降级：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景。</li></ul><h3 id="降级预案" tabindex="-1"><a class="header-anchor" href="#降级预案"><span>降级预案</span></a></h3><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p><ul><li><p>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p></li><li><p>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p></li><li><p>错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</p></li><li><p>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p></li></ul><h3 id="服务降级分类" tabindex="-1"><a class="header-anchor" href="#服务降级分类"><span>服务降级分类</span></a></h3><ul><li>降级按照是否自动化可分为：自动开关降级（超时、失败次数、故障、限流）和人工开关降级（秒杀、电商大促等）。</li><li>降级按照功能可分为：读服务降级、写服务降级。</li><li>降级按照处于的系统层次可分为：多级降级。</li></ul><h3 id="自动降级分类" tabindex="-1"><a class="header-anchor" href="#自动降级分类"><span>自动降级分类</span></a></h3><ul><li><p>超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p></li><li><p>失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p></li><li><p>故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p></li><li><p>限流降级: 当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）</p></li></ul><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h3><ul><li>核心服务或非核心服务。</li><li>是否支持降级，及其降级策略。</li><li>业务放通场景，极其策略。</li></ul><h2 id="服务熔断" tabindex="-1"><a class="header-anchor" href="#服务熔断"><span>服务熔断</span></a></h2><p>熔断这一概念来源于电子工程中的断路器（Circuit Breaker）。在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。</p><p>熔断机制是应对雪崩效应的一种微服务链路保护机制，当整个链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息。</p><h3 id="熔断的意义" tabindex="-1"><a class="header-anchor" href="#熔断的意义"><span>熔断的意义</span></a></h3><p><strong>上游服务快速失败（Fail Fast），保护下游服务</strong>。</p><h3 id="熔断适用场景" tabindex="-1"><a class="header-anchor" href="#熔断适用场景"><span>熔断适用场景</span></a></h3><p>出于系统性能问题的考虑，并发不高时timeout可以避免线程阻塞带来的性能问题，但是并发高时timeout就不能解决问题啦。这时可以用熔断。</p><p>只要是服务之间的调用，并且能设计合理的获取返回值的方案（返回值可以是默认值，或者通过一种后备（Fallback）方案获取的值），一般业务场景都可以做熔断处理。</p><p>比如电商行业，在sku不是很多的场景下，我们可以在订单服务冗余库存数据（注意控制合理的安全库存，防超卖）。下单减库存时，如果库存服务挂了，开启熔断后，我们可以直接从订单服务取库存，订单服务取不到库存，按扣减库存失败处理。这个可以做为后备（Fallback）方案。</p><h3 id="断路器" tabindex="-1"><a class="header-anchor" href="#断路器"><span>断路器</span></a></h3><p>“断路器”本身是一种开关装置，当某个服务单元发生故障监控(类似熔断保险丝)，向调用方法返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延。乃至雪崩。</p><h2 id="开源方案" tabindex="-1"><a class="header-anchor" href="#开源方案"><span>开源方案</span></a></h2><ol><li><p>Sentinel：</p><p>阿里中间件团队开源的，面向分布式服务架构的轻量级高可用流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户保护服务的稳定性。</p></li><li><p>Hystrix：</p><p>Hystrix是一个用于分布式系统的延迟和容错的开源库。在分布式系统里，许多依赖不可避免的调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性。</p></li><li><p>Resilience4j：</p><p>Resilience4j是一款轻量级，易于使用的容错库，其灵感来自于Netflix Hystrix，但是专为Java 8和函数式编程而设计。轻量级，因为库只使用了Vavr，它没有任何其他外部依赖下。相比之下，Netflix Hystrix对Archaius具有编译依赖性，Archaius具有更多的外部库依赖性，例如Guava和Apache Commons Configuration。</p></li></ol><blockquote><p>https://pdai.tech/md/arch/arch-y-reduce.html</p><p>https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&amp;mid=2247506440&amp;idx=4&amp;sn=5719c4fa0b9c80ed2ea0ab3c35d19a6b&amp;chksm=fbb153f6ccc6dae02cf5caae458cd245bde5ecf9ca3aa2905eab9a47cc4586064928ef82a314&amp;scene=27</p></blockquote>',35),t=[p];function h(c,r){return i(),a("div",null,t)}const o=l(n,[["render",h],["__file","熔断和降级.html.vue"]]),u=JSON.parse('{"path":"/design/distributed/%E7%86%94%E6%96%AD%E5%92%8C%E9%99%8D%E7%BA%A7.html","title":"熔断和降级","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"雪崩效应","slug":"雪崩效应","link":"#雪崩效应","children":[]},{"level":2,"title":"常见容错模式","slug":"常见容错模式","link":"#常见容错模式","children":[]},{"level":2,"title":"服务降级","slug":"服务降级","link":"#服务降级","children":[{"level":3,"title":"降级方式","slug":"降级方式","link":"#降级方式","children":[]},{"level":3,"title":"降级预案","slug":"降级预案","link":"#降级预案","children":[]},{"level":3,"title":"服务降级分类","slug":"服务降级分类","link":"#服务降级分类","children":[]},{"level":3,"title":"自动降级分类","slug":"自动降级分类","link":"#自动降级分类","children":[]},{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[]}]},{"level":2,"title":"服务熔断","slug":"服务熔断","link":"#服务熔断","children":[{"level":3,"title":"熔断的意义","slug":"熔断的意义","link":"#熔断的意义","children":[]},{"level":3,"title":"熔断适用场景","slug":"熔断适用场景","link":"#熔断适用场景","children":[]},{"level":3,"title":"断路器","slug":"断路器","link":"#断路器","children":[]}]},{"level":2,"title":"开源方案","slug":"开源方案","link":"#开源方案","children":[]}],"git":{"updatedTime":1694763025000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"design/distributed/熔断和降级.md"}');export{o as comp,u as data};
