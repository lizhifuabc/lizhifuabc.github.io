import{_ as n,o as s,c as a,a as e}from"./app-oJgUVX7T.js";const t={},p=e(`<h1 id="spring事件" tabindex="-1"><a class="header-anchor" href="#spring事件"><span>Spring事件</span></a></h1><h2 id="eventlistener" tabindex="-1"><a class="header-anchor" href="#eventlistener"><span>@EventListener</span></a></h2><p>监听器只需要 在方法上声明为 EventListener注解，Spring就会自动找到对应的监听器。Spring会根据方法入参的事件类型和发布的事件类型自动匹配。</p><p>服务关闭期间：</p><ol><li><strong>事件发布成功</strong>：发布事件的过程是同步的，因此在事件发布成功之前，应用程序不会继续执行。因此，如果事件发布成功，则意味着事件已被传递到所有的事件监听器。</li><li><strong>监听器无法完成处理</strong>：如果在事件监听器处理事件期间关闭了应用程序，监听器可能无法完成其正常的事件处理逻辑。这可能会导致未完成的操作、资源泄漏或不一致的状态，具体取决于监听器中的操作和应用程序的设计。</li></ol><p>解决办法：</p><ol><li>优雅停机：并不能完全消除在关闭期间可能发生的问题。如果某些操作耗时很长，或者事件监听器中的操作不受控制，仍然可能在关闭期间引发问题。</li><li>责任链模式了，for循环订阅的策略类。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventSubscriber</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">,</span> <span class="token class-name">EventSubscriber</span> nextSubscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteEventSubscriber</span> <span class="token keyword">implements</span> <span class="token class-name">EventSubscriber</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">EventSubscriber</span> nextSubscriber<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">,</span> <span class="token class-name">EventSubscriber</span> nextSubscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextSubscriber <span class="token operator">=</span> nextSubscriber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理事件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextSubscriber <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nextSubscriber<span class="token punctuation">.</span><span class="token function">handleEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),i=[p];function c(l,o){return s(),a("div",null,i)}const u=n(t,[["render",c],["__file","Spring事件.html.vue"]]),d=JSON.parse('{"path":"/spring/spring/Spring%E4%BA%8B%E4%BB%B6.html","title":"Spring事件","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"@EventListener","slug":"eventlistener","link":"#eventlistener","children":[]}],"git":{"updatedTime":1697008847000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"spring/spring/Spring事件.md"}');export{u as comp,d as data};
