import{_ as a,r as e,o as t,c as l,b as n,e as p,d as o,a as i}from"./app-oJgUVX7T.js";const c="/assets/image-20231031141119707-QDUs0FSP.png",d="/assets/640-20231031124422944-3HGVP22q.png",r="/assets/640-DSxactPc.png",u="/assets/640-20231031123110277-8H3Pnc7v.png",k="/assets/640-20231031123241812-BliqYl3c.png",m={},g=n("h1",{id:"mysql全文索引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql全文索引"},[n("span",null,"MySQL全文索引")])],-1),v={href:"https://dev.mysql.com/doc/refman/8.2/en/fulltext-fine-tuning.html",target:"_blank",rel:"noopener noreferrer"},b=i(`<p>以下是翻译一部分个人认为比较重要的数据：</p><ul><li>MySQL的全文搜索功能几乎没有用户可调的参数。</li><li>全文搜索经过仔细调整，以提高效率。在大多数情况下，修改默认行为实际上会降低效率。</li><li>大多数全文变量都必须在服务器启动时设置。需要重新启动服务器才能更改它们；在服务器运行时不能修改它们。</li><li>某些变量更改要求重新生成表中的FULLTEXT索引。</li></ul><p>MySQL全文索引是一种用于快速搜索文本字符串的索引，在MySQL数据库中，它可以用来提高文本搜索的效率。全文索引不同于普通索引，普通索引只是对列值进行排序，而全文索引则会对列的内容进行<strong>分词</strong>，并且对每个分词建立索引，从而可以在文本中进行模糊搜索、部分匹配和多词搜索等操作。</p><h2 id="配置最小和最大字长" tabindex="-1"><a class="header-anchor" href="#配置最小和最大字长"><span>配置最小和最大字长</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%token%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+c+`" alt="image-20231031141119707"></p><ul><li>innodb_ft_min_token_size：默认3，表示最小3个字符作为一个关键词，增大该值可减少全文索引的大小</li><li>innodb_ft_max_token_size： 默认84，表示最大84个字符作为一个关键词，限制该值可减少全文索引的大小</li><li>ngram_token_size：默认2，表示2个字符作为内置分词解析器的一个关键词,合法取值范围是1-10，如对“abcd”建立全文索引，关键词为’ab’，‘bc’，‘cd’ 当使用ngram分词解析器时，innodb_ft_min_token_size和innodb_ft_max_token_size 无效</li></ul><p><strong>注意：最小和最大字长全文参数不适用于使用ngram语法分析器创建的FULLTEXT索引。ngram令牌大小由ngram_token_size选项定义。</strong></p><p>更改任何这些选项后，重新生成FULLTEXT索引以使更改生效，然后重新启动服务器并重新生成FULLTEXT索引。</p><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h2><ol><li>自然语言全文索引创建索引时的字段需与查询的字段保持一致，即MATCH里的字段必须和FULLTEXT里的一模一样；</li><li>自然语言检索时，检索的关键字在所有数据中不能超过50%（即常见词），则不会检索出结果。可以通过布尔检索查询；</li></ol><h2 id="stopword" tabindex="-1"><a class="header-anchor" href="#stopword"><span>stopword</span></a></h2><p>查询所有的stopword：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_FT_DEFAULT_STOPWORD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>不建议使用方法：stopword一般是mysql自建的，但可以通过设置ft_stopword_file变量为自定义文件，从而自己设置stopword，设置完成后需要重新创建索引。</li><li>使用<strong>布尔索引查询</strong></li></ol><p>小于最短长度和大于最长长度的关键词无法查出结果。可以通过设置对应的变量来改变长度限制，修改后需要重新创建索引。</p><h2 id="配置自然语言搜索阈值" tabindex="-1"><a class="header-anchor" href="#配置自然语言搜索阈值"><span>配置自然语言搜索阈值</span></a></h2><h2 id="测试数据" tabindex="-1"><a class="header-anchor" href="#测试数据"><span>测试数据</span></a></h2><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><p>全文索引只能用于CHAR、VARCHAR、TEXT和BLOB类型的字段。此外，在MySQL 5.6版本以前，全文索引只支持MyISAM存储引擎，而在MySQL 5.6版本以后，InnoDB存储引擎也支持全文索引。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> FULLTEXT <span class="token keyword">INDEX</span> index_name
<span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token keyword">WITH</span> PARSER parser_name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index_name：索引名称</li><li>table_name：索引表名称</li><li>column_name：索引列名称</li><li>WITH PARSER子：可选，用于指定在创建索引时要使用的<strong>解析器</strong>。</li></ul><h2 id="使用全文索引进行查询" tabindex="-1"><a class="header-anchor" href="#使用全文索引进行查询"><span>使用全文索引进行查询</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">&#39;keyword&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ngram解析器" tabindex="-1"><a class="header-anchor" href="#ngram解析器"><span>ngram解析器</span></a></h2><p>内置的FULLTEXT解析器通过查找特定的分隔符来确定单词的开始和结束位置;例如:(空格)，(逗号)，和.(点号)。如果单词之间没有分隔符(例如中文)，则内置的FULLTEXT解析器无法确定单词的开始或结束位置。</p><p>可以使用<strong>ngram解析器</strong>插件(用于<strong>中文</strong>、日文或韩文)或MeCab解析器插件(用于日文)创建FULLTEXT索引。</p><p>ngram是给定文本序列中<strong>n个字符的连续序列</strong>。ngram解析器将文本序列标记为连续的n个字符序列。例如，我们可以使用ngram全文解析器将“abcd”标记为不同的n值。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>n<span class="token operator">=</span><span class="token number">1</span>: <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span>
n<span class="token operator">=</span><span class="token number">2</span>: <span class="token string">&#39;ab&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cd&#39;</span>
n<span class="token operator">=</span><span class="token number">3</span>: <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bcd&#39;</span>
n<span class="token operator">=</span><span class="token number">4</span>: <span class="token string">&#39;abcd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的n事实上是ngram指定的令牌大小（token size），Ngram令牌大小可以使用<strong>ngram_token_size</strong>配置选项进行配置，该选项的最小值为1，最大值为10。</p><ul><li>修改ngram_token_size需要重启mysql服务器</li><li>修改了ngram_token_size之后，我们需要重建fulltext索引，一般我们采用删了重加的方式重建。</li><li>对于使用ngram解析器的FULLTEXT索引，忽略以下最小和最大字长配置选项:innodb_ft_min_token_size, innodb_ft_max_token_size, ft_min_word_len和ft_max_word_len。这些参数分别是innodb、myIsam引擎在使用非ngram分词时对应的设置令牌大小的参数。</li></ul><p><strong>ngram_token_size设置为要搜索的最大令牌的大小。如果我们需要只搜索单个字符，请将ngram_token_size设置为1。</strong></p><p>比如我们要使用全文索引，查询name字段中包含“刘”字的记录。</p><p>创建使用ngram分词的全文索引：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">add</span> fulltext <span class="token keyword">index</span> idx_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">with</span> parser ngram
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用Match Against语法进行查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>uuc_business_user<span class="token punctuation">\`</span></span> <span class="token keyword">where</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">&#39;刘&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，我是使用单个汉字（刘）进行查询的，这个时候如果想要查询到结果，需要将ngram_token_size设置为1，如果ngram_token_size的值是大于1的数，将查询不到任何记录。如果我们要支持搜索单个字符，记住需要将ngram_token_size设置为1。</p><p>ngram_token_size设置为1之后，使用大于1个的汉字进行搜索时，mysql会将汉字拆分为多个单个汉字分别进行搜索，然后将结果进行合并。</p><p>比如使用 MATCH(name) AGAINST(&#39;刘娅&#39;)进行查询时，得到的结果，会如下所示：</p><p><img src="`+d+`" alt="图片"></p><p>如果想要查询结果，同时包含“刘”和“娅”，可以使用如下语法进行查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> uuc_business_user <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> AGAINST <span class="token punctuation">(</span><span class="token string">&#39;&quot;刘娅&quot;&#39;</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> <span class="token keyword">MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的语句中使用了布尔模式，包含在双引号内的搜索词语“刘娅”被看作一个短语，表示<strong>必须同时包含</strong>这两个词语，即只有完全匹配“刘娅”这个词语的文档才会被返回。在布尔模式下，使用双引号括起来的搜索词语表示一个短语，这个短语必须完全匹配才能返回结果。因此，这个查询只会返回包含完整短语“刘娅”的文档，不会返回包含“刘”和“娅”这两个词语的文档。</p><p>而如果不加<code>in BOOLEAN MODE</code>，则默认是使用了自然语言模式，MySQL会使用内置的自然语言处理技术对搜索查询进行分词和停用词处理，并根据每个词语在文档中的重要性对文档进行打分。在自然语言模式下，使用双引号括起来的搜索词语表示一个短语，但并不要求这个短语必须完全匹配。因此，这个查询将返回包含“刘”和“娅”这两个词语的文档，不一定是完全匹配“刘娅”这个短语的文档。</p><h2 id="自然模式和布尔模式" tabindex="-1"><a class="header-anchor" href="#自然模式和布尔模式"><span>自然模式和布尔模式</span></a></h2><p>在MySQL中，全文搜索支持两种主要的查询模式：<strong>自然语言模式和布尔模式</strong>。这两种模式的主要区别在于它们如何处理搜索查询和返回结果。</p><h3 id="自然模式-in-natural-language-mode" tabindex="-1"><a class="header-anchor" href="#自然模式-in-natural-language-mode"><span>自然模式 （IN NATURAL LANGUAGE MODE)</span></a></h3><p>全文搜索中的自然语言模式是默认模式，它使用自然语言处理技术来解析搜索查询并返回最相关的结果。自然语言模式会对搜索查询进行分词和停用词处理，并根据每个词语在文档中的重要性对文档进行打分。然后，MySQL会根据文档的得分对搜索结果进行排序，并返回最相关的文档。</p><p>例如，以下查询将在自然语言模式下搜索包含“刘”和“娅”的文档，并按照相关性进行排序：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">&#39;刘 娅&#39;</span> <span class="token operator">IN</span> <span class="token keyword">NATURAL</span> <span class="token keyword">LANGUAGE</span> <span class="token keyword">MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布尔模式-in-boolean-mode" tabindex="-1"><a class="header-anchor" href="#布尔模式-in-boolean-mode"><span>布尔模式（IN BOOLEAN MODE)</span></a></h2><p>全文搜索中的布尔模式允许用户使用布尔运算符**（AND、OR、NOT）** 来组合搜索条件，并通过对文档进行匹配来确定文档是否符合查询条件。在布尔模式下，MySQL会将搜索查询视为布尔表达式，并使用布尔运算符来确定每个文档是否符合查询条件。</p><p>例如，以下查询将在布尔模式下搜索包含“刘”和“娅”的文档:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">&#39;+刘 +娅&#39;</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> <span class="token keyword">MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在布尔模式下，“+”符号表示必须包含该词语，“-”符号表示不包含该词语，“|”符号表示或者。这个查询将返回包含“apple”和“iphone”两个词语的文档。</p><p>需要注意的是，自然语言模式和布尔模式都有各自的优点和缺点。自然语言模式通常更易于使用和理解，但可能会导致一些不准确的结果。布尔模式更灵活，可以<strong>更精确地控制</strong>搜索条件，但需要更多的查询语法知识。在使用全文搜索时，应根据具体情况选择合适的查询模式。</p><h2 id="全文索引与-like" tabindex="-1"><a class="header-anchor" href="#全文索引与-like"><span>全文索引与 like &quot;%%&quot;</span></a></h2><p>全文索引和LIKE &quot;%%&quot;是两个不同的文本搜索方法，它们在实现和性能上有很大的差异。</p><p>全文索引是一种特殊类型的索引，用于对文本字段进行全文搜索，它可以支持模糊搜索、部分匹配和多词搜索等操作。全文索引可以显著提高文本搜索的性能和效率，特别是在处理大量文本数据时。</p><p>与此不同，LIKE &quot;%%&quot;是一种基于通配符的模式匹配操作，可以在文本字段中查找包含指定字符串的记录。但是，LIKE &quot;%%&quot;操作通常会导致<strong>全表扫描</strong>，并且性能较低，特别是在处理大量数据时。</p><p>与此不同，LIKE &quot;%%&quot;是一种基于通配符的模式匹配操作，可以在文本字段中查找包含指定字符串的记录。但是，LIKE &quot;%%&quot;操作通常会导致<strong>全表扫描</strong>，并且性能较低，特别是在处理大量数据时。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>mysql使用全文索引来提高文本搜索的效率。我们可以使用FULLTEXT关键字来声明一个全文索引列，创建全文索引后，可以使用MATCH AGAINST语句来执行全文搜索查询。我们需要使用ngram分词器来支持中文全文搜索。ngram_token_size用来指定令牌大小。全文搜索支持两种主要的查询模式：自然语言模式和布尔模式，自然语言模式通常更易于使用和理解，但可能会导致一些不准确的结果。布尔模式更灵活，可以<strong>更精确地控制</strong>搜索条件，但需要更多的查询语法知识。</p><p>InnoDB 在模糊查询数据时使用 &quot;<code>%xx</code>&quot; 会导致索引失效。</p><p>全文索引（Full-Text Search）是将存储于数据库中的整本书或整篇文章中的任意信息查找出来的技术。它可以根据需要获得全文中有关章、节、段、句、词等信息，也可以进行各种统计和分析。</p><h2 id="倒排索引" tabindex="-1"><a class="header-anchor" href="#倒排索引"><span>倒排索引</span></a></h2><p>全文检索通常使用倒排索引（inverted index）来实现，倒排索引同 B+Tree 一样，也是一种索引结构。</p><p>它在辅助表中存储了单词与单词自身在一个或多个文档中所在位置之间的映射，这通常利用关联数组实现，拥有两种表现形式：</p><ul><li><code>inverted file index</code>：{单词，单词所在文档的id}</li><li><code>full inverted index</code>：{单词，（单词所在文档的id，再具体文档中的位置）}</li></ul><p><img src="`+r+'" alt="图片"></p><p>上图为 inverted file index 关联数组，可以看到其中单词&quot;code&quot;存在于文档1,4中，这样存储再进行全文查询就简单了，可以直接根据 Documents 得到包含查询关键字的文档；而 full inverted index 存储的是对，即（DocumentId,Position），因此其存储的倒排索引如下图，如关键字&quot;code&quot;存在于文档1的第6个单词和文档4的第8个单词。</p><blockquote><p>相比之下，full inverted index 占用了更多的空间，但是能更好的定位数据，并扩充一些其他搜索特性。</p></blockquote><p><img src="'+u+`" alt="图片"></p><h2 id="全文检索" tabindex="-1"><a class="header-anchor" href="#全文检索"><span>全文检索</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span> 
  id <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> 
  author <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  content <span class="token keyword">TEXT</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  FULLTEXT full_index_name <span class="token punctuation">(</span>col_name<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> FULLTEXT <span class="token keyword">INDEX</span> full_index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">(</span>col_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> table_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> space <span class="token keyword">from</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_TABLES
<span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;test/%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="图片"></p><p>上述六个索引表构成倒排索引，称为辅助索引表。当传入的文档被标记化时，单个词与位置信息和关联的DOC_ID，根据单词的第一个字符的字符集排序权重，在六个索引表中对单词进行完全排序和分区。</p><p>MySQL 数据库支持全文检索的查询，全文索引只能在 InnoDB 或 MyISAM 的表上使用，并且只能用于创建 char,varchar,text 类型的列。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">MATCH</span><span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span>expr<span class="token punctuation">[</span>search_modifier<span class="token punctuation">]</span><span class="token punctuation">)</span>
search_modifier:
{
    <span class="token operator">IN</span> <span class="token keyword">NATURAL</span> <span class="token keyword">LANGUAGE</span> <span class="token keyword">MODE</span>
    <span class="token operator">|</span> <span class="token operator">IN</span> <span class="token keyword">NATURAL</span> <span class="token keyword">LANGUAGE</span> <span class="token keyword">MODE</span> <span class="token keyword">WITH</span> QUERY EXPANSION
    <span class="token operator">|</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> <span class="token keyword">MODE</span>
    <span class="token operator">|</span> <span class="token keyword">WITH</span> QUERY EXPANSION
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全文搜索使用 <code>MATCH()</code> <code>AGAINST()</code>语法进行，其中，<code>MATCH()</code>采用逗号分隔的列表，命名要搜索的列。<code>AGAINST()</code>接收一个要搜索的字符串，以及一个要执行的搜索类型的可选修饰符。全文检索分为三种类型：自然语言搜索、布尔搜索、查询扩展搜索，下面将对各种查询模式进行介绍。</p><h3 id="natural-language" tabindex="-1"><a class="header-anchor" href="#natural-language"><span>Natural Language</span></a></h3><p>自然语言搜索将搜索字符串解释为自然人类语言中的短语，<code>MATCH()</code>默认采用 Natural Language 模式，其表示查询带有指定关键字的文档。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> count 
<span class="token keyword">FROM</span>
    <span class="token identifier"><span class="token punctuation">\`</span>fts_articles<span class="token punctuation">\`</span></span> 
<span class="token keyword">WHERE</span>
    <span class="token keyword">MATCH</span> <span class="token punctuation">(</span> title<span class="token punctuation">,</span> body <span class="token punctuation">)</span> AGAINST <span class="token punctuation">(</span> <span class="token string">&#39;MySQL&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token keyword">MATCH</span> <span class="token punctuation">(</span> title<span class="token punctuation">,</span> body <span class="token punctuation">)</span> 
    against <span class="token punctuation">(</span> <span class="token string">&#39;MySQL&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> count 
<span class="token keyword">FROM</span>
    <span class="token identifier"><span class="token punctuation">\`</span>fts_articles<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两种语句虽然得到的结果是一样的，但从内部运行来看，第二句SQL的执行速度更快些，因为第一句SQL（基于where索引查询的方式）还需要进行相关性的排序统计，而第二种方式是不需要的。</p><p>通过SQL语句查询相关性：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token operator">*</span><span class="token punctuation">,</span>
    <span class="token keyword">MATCH</span> <span class="token punctuation">(</span> title<span class="token punctuation">,</span> body <span class="token punctuation">)</span> against <span class="token punctuation">(</span> <span class="token string">&#39;MySQL&#39;</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> Relevance 
<span class="token keyword">FROM</span>
    fts_articles<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全文索引优化" tabindex="-1"><a class="header-anchor" href="#全文索引优化"><span>全文索引优化</span></a></h2><p><strong>优化MATCH AGAINST使用：</strong></p><ol><li>对要进行全文索引的字段进行适当的格式化和清洗，去除无用信息，减少全文搜索的数据量。</li><li>优化FULLTEXT搜索的关键词。可以将关键词进行“分词”，去掉无意义的单词或标点，避免将无关单词搜索。</li><li>设置最大列数和最大行数的参数，限制全文索引搜索范围，提高性能。</li></ol><p><strong>使用多字段索引：</strong></p><p>MySQL中，创建全文索引时可以同时对多个字段创建索引。如果查询语句中涉及到多个字段的全文检索，那么可以使用多字段索引，可以大大提高检索性能。具体做法是在FULLTEXT关键字后面按顺序列举需要索引的字段，如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> article <span class="token punctuation">(</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
FULLTEXT<span class="token punctuation">(</span>title<span class="token punctuation">,</span>auth<span class="token punctuation">,</span>content<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，需要在MATCH AGAINST语句中按照FULLTEXT索引中给出的顺序对搜索字段进行指定，如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> article <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> content<span class="token punctuation">)</span> AGAINST <span class="token punctuation">(</span><span class="token string">&#39;搜索词&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用memcached、CDN等缓存技术：</strong></p><p>MySQL中，全文检索会根据搜索条件匹配，然后返回结果。如果数据量很大，复杂度很高，会导致查询时间变长，影响查询性能。可以使用缓存技术，如memcached、CDN等技术，将全文检索的结果进行缓存，对于下一次相同的查询，直接从缓存中取结果，提高检索速度。</p><ul><li><strong>调整全文搜索相关配置参数：</strong> 在 MySQL 中，一些配置参数影响全文搜索的性能，如 <code>innodb_ft_num_word_optimize</code> 和 <code>innodb_ft_result_cache_limit</code>。根据具体需求进行调整。</li><li><strong>适当调整 InnoDB 配置：</strong> 调整 InnoDB 相关的配置参数，例如 <code>innodb_buffer_pool_size</code>，确保适当的内存用于缓存索引和数据。</li></ul>`,101);function h(_,y){const s=e("ExternalLinkIcon");return t(),l("div",null,[g,n("p",null,[n("a",v,[p("MySQL :: MySQL 8.2 Reference Manual :: 12.9.6 Fine-Tuning MySQL Full-Text Search"),o(s)])]),b])}const T=a(m,[["render",h],["__file","MySQL全文索引.html.vue"]]),q=JSON.parse('{"path":"/database/mysql/MySQL%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95.html","title":"MySQL全文索引","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"配置最小和最大字长","slug":"配置最小和最大字长","link":"#配置最小和最大字长","children":[]},{"level":2,"title":"注意点","slug":"注意点","link":"#注意点","children":[]},{"level":2,"title":"stopword","slug":"stopword","link":"#stopword","children":[]},{"level":2,"title":"配置自然语言搜索阈值","slug":"配置自然语言搜索阈值","link":"#配置自然语言搜索阈值","children":[]},{"level":2,"title":"测试数据","slug":"测试数据","link":"#测试数据","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"使用全文索引进行查询","slug":"使用全文索引进行查询","link":"#使用全文索引进行查询","children":[]},{"level":2,"title":"ngram解析器","slug":"ngram解析器","link":"#ngram解析器","children":[]},{"level":2,"title":"自然模式和布尔模式","slug":"自然模式和布尔模式","link":"#自然模式和布尔模式","children":[{"level":3,"title":"自然模式 （IN NATURAL LANGUAGE MODE)","slug":"自然模式-in-natural-language-mode","link":"#自然模式-in-natural-language-mode","children":[]}]},{"level":2,"title":"布尔模式（IN BOOLEAN MODE)","slug":"布尔模式-in-boolean-mode","link":"#布尔模式-in-boolean-mode","children":[]},{"level":2,"title":"全文索引与 like \\"%%\\"","slug":"全文索引与-like","link":"#全文索引与-like","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"倒排索引","slug":"倒排索引","link":"#倒排索引","children":[]},{"level":2,"title":"全文检索","slug":"全文检索","link":"#全文检索","children":[{"level":3,"title":"Natural Language","slug":"natural-language","link":"#natural-language","children":[]}]},{"level":2,"title":"全文索引优化","slug":"全文索引优化","link":"#全文索引优化","children":[]}],"git":{"updatedTime":1698818603000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"database/mysql/MySQL全文索引.md"}');export{T as comp,q as data};
