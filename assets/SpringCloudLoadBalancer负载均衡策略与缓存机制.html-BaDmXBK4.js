import{_ as a,r as e,o as t,c as p,b as n,e as c,d as o,a as l}from"./app-oJgUVX7T.js";const i={},u=n("h1",{id:"spring-cloud-loadbalancer-负载均衡策略",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-cloud-loadbalancer-负载均衡策略"},[n("span",null,"Spring Cloud LoadBalancer 负载均衡策略")])],-1),r={href:"https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>LoadBalancer（负载均衡器）是一种用来分发网络或应用程序流量到多个服务器的技术。它可以防止任何单一服务的过载，通过分散负载来保持整个系统的平稳运行，保证系统的高可用性和可靠性。</p><p>负载均衡策略大体上分为两类：服务端的负载均衡和客户端的负载均衡。</p><ul><li>服务端负载均衡 （如 Nginx、F5）：</li></ul><p>​ 请求先到达一个中介（如负载均衡器设备或者服务，例如Nginx），由这个中介根据配置的策略将请求分发到后端的多个服务器中。 它对客户端是透明的，即客户端不需要知道有多少服务器以及它们的存在。</p><ul><li><p>客户端负载均衡 （如 Ribbon、Spring Cloud LoadBalancer）</p><p>请求的分配逻辑由客户端持有，客户端直接决定将请求发送到哪一个服务器。也就是说在客户端负载均衡中，客户端通常具备一份服务列表，它知道每个服务的健康状况，基于这些信息和负载均衡策略，客户端会选择一个最适合的服务去发送请求。</p></li></ul><h2 id="常见的负载均衡策略" tabindex="-1"><a class="header-anchor" href="#常见的负载均衡策略"><span>常见的负载均衡策略</span></a></h2><ul><li>轮询（Round Robin） 描述：轮询是最简单的负载均衡策略，它按顺序将每个新请求分配给下一个服务器。当到达列表末尾时，它会重新开始。 使用场景：适用于服务器性能相似且负载相对均衡的情况。</li><li>加权轮询（Weighted Round Robin） 描述：与轮询类似，但给每个服务器分配一个权重。服务器的权重越高，分配给该服务器的请求就越多。 使用场景：适用于服务器性能不均或希望给特定服务器更多流量的情况。</li><li>随机（Random） 描述：随机选择一个服务器来处理新的请求。 使用场景：适用于服务器数量较多且请求分布均匀的场景。</li><li>加权随机（Weighted Random） 描述：类似于随机策略，但考虑服务器的权重。权重越高的服务器被选中的概率越大。 使用场景：当服务器性能不均匀时，希望根据性能分配不同的请求量。</li><li>最小连接（Least Connections） 描述：选择当前连接数最少的服务器来处理新的请求。这种方法考虑了服务器的当前负载。 使用场景：适用于请求处理时间波动较大的场景。</li><li>加权最小连接（Weighted Least Connections） 描述：与最小连接策略类似，但考虑了服务器的权重和当前连接数。 使用场景：当服务器性能不同且请求处理时间不一致时使用。</li><li>基于资源（Resource Based） 描述：根据服务器的实际资源使用情况（如CPU、内存使用率）来分配请求。 使用场景：适用于资源敏感型应用，如高CPU或内存需求的应用。</li><li>IP哈希（IP Hash） 描述：根据请求的源IP地址进行哈希计算，然后分配到特定的服务器。这样可以保证来自同一IP地址的请求总是被发送到同一个服务器。 使用场景：适用于需要保持用户会话（session）一致性的场景。</li></ul><h2 id="spring-cloud-loadbalancer-内置的两种负载均衡策略" tabindex="-1"><a class="header-anchor" href="#spring-cloud-loadbalancer-内置的两种负载均衡策略"><span>Spring Cloud LoadBalancer 内置的两种负载均衡策略</span></a></h2><p><strong>Round-Robin-based</strong> 轮询负载均衡策略（默认的）</p><p>RoundRobinLoadBalancer：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInstanceResponse</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No servers available for service: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmptyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">)</span>instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 原子操作，保证了每次调用都会得到一个唯一的递增数值,&amp; Integer.MAX_VALUE 这部分是一个位运算，它确保了如果 							// position 的值增加到超过 Integer.MAX_VALUE 时，不会产生负数。</span>
            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
            <span class="token comment">// 计算的是 pos 除以 instances 列表大小的余数，这保证了不论 pos 增长到多大，这个表达式的结果都是在 0 到 								// instances.size() - 1 的范围内，这样就可以循环地从服务实例列表中选择服务实例。</span>
            <span class="token class-name">ServiceInstance</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">)</span>instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos <span class="token operator">%</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResponse</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Random</strong> 随机负载均衡策略</p><p>RandomLoadBalancer：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInstanceResponse</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No servers available for service: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmptyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 随机获取</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ServiceInstance</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">)</span>instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResponse</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-cloud-loadbalancer-中缓存机制" tabindex="-1"><a class="header-anchor" href="#spring-cloud-loadbalancer-中缓存机制"><span>Spring Cloud LoadBalancer 中缓存机制</span></a></h2><p>尽管关闭缓存对于开发和测试很有用，但是在生产环境上，它的效率是要远低于开启缓存，所以在生产环境上始终都要开启缓存。</p><p>Spring Cloud LoadBalancer 中获取服务实例有两种方式：</p><ul><li>实时获取：每次都从注册中心得到最新的健康实例（效果好，开销大）</li><li>缓存服务列表：每次得到服务列表之后，缓存一段时间（既保证性能，也能保证一定的及时性）</li></ul><p>缓存配置：</p><ul><li>缓存的过期时间为 35s；</li><li>缓存保存个数为 256 个。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">loadbalancer</span><span class="token punctuation">:</span>
      <span class="token key atrule">cache</span><span class="token punctuation">:</span>
        <span class="token key atrule">ttl</span><span class="token punctuation">:</span> 35s  <span class="token comment"># 过期时间</span>
        <span class="token key atrule">capacity</span><span class="token punctuation">:</span> <span class="token number">1024</span>  <span class="token comment"># 设置缓存个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">loadbalancer</span><span class="token punctuation">:</span>
      <span class="token key atrule">cache</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 关闭缓存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>https://blog.csdn.net/xaiobit_hl/article/details/134283093</p><p>https://blog.csdn.net/weixin_73000974/article/details/135901495</p></blockquote>`,23);function d(v,m){const s=e("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",r,[c("Cloud Native Applications (spring.io)"),o(s)])]),k])}const g=a(i,[["render",d],["__file","SpringCloudLoadBalancer负载均衡策略与缓存机制.html.vue"]]),h=JSON.parse('{"path":"/spring/springCloud/SpringCloudLoadBalancer%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E4%B8%8E%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html","title":"Spring Cloud LoadBalancer 负载均衡策略","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"常见的负载均衡策略","slug":"常见的负载均衡策略","link":"#常见的负载均衡策略","children":[]},{"level":2,"title":"Spring Cloud LoadBalancer 内置的两种负载均衡策略","slug":"spring-cloud-loadbalancer-内置的两种负载均衡策略","link":"#spring-cloud-loadbalancer-内置的两种负载均衡策略","children":[]},{"level":2,"title":"Spring Cloud LoadBalancer 中缓存机制","slug":"spring-cloud-loadbalancer-中缓存机制","link":"#spring-cloud-loadbalancer-中缓存机制","children":[]}],"git":{"updatedTime":1715597425000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"spring/springCloud/SpringCloudLoadBalancer负载均衡策略与缓存机制.md"}');export{g as comp,h as data};
