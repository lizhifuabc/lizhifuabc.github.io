import{_ as n,o as s,c as a,a as t}from"./app-oJgUVX7T.js";const p={},e=t(`<h1 id="值传递" tabindex="-1"><a class="header-anchor" href="#值传递"><span>值传递</span></a></h1><p>在Java中，参数传递是值传递（Pass-by-Value）。这意味着当你将一个变量作为参数传递给一个方法时，实际上传递给方法的是该变量的值（也就是存储在变量中的数据），而不是变量本身。</p><ol><li><p><strong>值传递(pass by value)</strong>：是指在调用函数时将实际参数 复制 一份传递到函数中，这样在函数中如果对 参数 进行修改，将不会影响到实际参数。</p></li><li><p>**引用传递 (pass by reference) **：是指在调用函数时将实际参数的地址 直接 传递到函数中，那么在函数中对 参数 所进行的修改，将影响到实际参数。</p></li></ol><p><strong>结论：</strong></p><ul><li>Java 中的参数传递是按值传递的。</li><li>如果参数是基本类型，传递的是基本类型的字面量值的拷贝。</li><li>如果参数是引用类型，传递的是引用的对象在堆中地址的拷贝。</li></ul><blockquote><p>其实就是操作的是一块内存还是新开辟了一块内存的区别。</p></blockquote><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h2><p>对于基本数据类型（如int、double、boolean等），这是直观的，因为它们存储的就是值本身，所以传递它们就是传递值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamTest2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// i 为 int 为基本数据类型，值 10 直接保存在变量中（栈）</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token comment">// 复制 i 的值 10 给形式参数 i1</span>
        <span class="token function">change</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出了方法i：&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> i1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        i1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入方法i：&quot;</span><span class="token operator">+</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行逻辑：</p><ol><li>i 为 int 为基本数据类型，值 10 直接保存在变量中（栈）</li><li>复制 i 的值 10 给形式参数 i1</li><li>change(int i1) 对 i1 进行修改</li><li>i 没有发生改变</li></ol><h2 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型"><span>引用数据类型</span></a></h2><p>对于引用数据类型（如对象、数组等），传递的是引用的值，也就是对象的内存地址。这可能会导致一些混淆，因为虽然传递的是引用的值，但仍然是值传递。这意味着在方法内部，你可以通过引用修改对象的状态，但如果你在方法内重新分配了引用，它不会影响原始引用。</p><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamTest3</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str  <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
        <span class="token function">change</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出了方法str：&quot;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始进入方法str：&quot;</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 对 i1 进行赋值</span>
        str1 <span class="token operator">=</span> <span class="token string">&quot;cd&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;赋值之后尚未出方法str：&quot;</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>初始进入方法str：ab
赋值之后尚未出方法str：cd
出了方法str：ab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>str 初始化，指向堆中 &quot;ab&quot; 的位置，内存地址 0x123456</li><li>复制 str 的内存地址 0x123456 到 str1</li><li>改变了形参 str1 的地址到 0x988766</li><li>此时 str 为0x123456，str1 为0x988766</li></ol><h3 id="实体bean" tabindex="-1"><a class="header-anchor" href="#实体bean"><span>实体Bean</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamTest4</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserParam</span> userParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userParam<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userParam<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;前：&quot;</span><span class="token operator">+</span>userParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">change</span><span class="token punctuation">(</span>userParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;后：&quot;</span><span class="token operator">+</span>userParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">UserParam</span> userParam1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        userParam1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小红&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 前：UserParam{name=&#39;小明&#39;, age=18}</span>
<span class="token comment">// 后：UserParam{name=&#39;小红&#39;, age=18}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>userParam 内存地址 0x12312 指向堆中 age = 18，name = &quot;小明&quot;</li><li>内存地址 0x12312 传递给 userParam1，此时 userParam1 内存地址也为 0x12312</li><li>此时修改的是内存地址 0x12312 指向的内容，并没有新的开辟内存</li><li>值发生了改变</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamTest5</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserParam</span> userParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userParam<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userParam<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;前：&quot;</span><span class="token operator">+</span>userParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">change</span><span class="token punctuation">(</span>userParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;后：&quot;</span><span class="token operator">+</span>userParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">UserParam</span> userParam1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        userParam1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userParam1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小红&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 前：UserParam{name=&#39;小明&#39;, age=18}</span>
<span class="token comment">// 后：UserParam{name=&#39;小明&#39;, age=18}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上面最大的区别是 userParam1 = new UserParam(); 新开辟了一个内存地址 0x88888</p>`,22),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","值传递.html.vue"]]),k=JSON.parse('{"path":"/java/base/%E5%80%BC%E4%BC%A0%E9%80%92.html","title":"值传递","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":2,"title":"引用数据类型","slug":"引用数据类型","link":"#引用数据类型","children":[{"level":3,"title":"String","slug":"string","link":"#string","children":[]},{"level":3,"title":"实体Bean","slug":"实体bean","link":"#实体bean","children":[]}]}],"git":{"updatedTime":1694095502000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"java/base/值传递.md"}');export{r as comp,k as data};
