import{_ as n,o as a,c as s,a as e}from"./app-oJgUVX7T.js";const t="/assets/image-20240320092527345-B991h7nx.png",p={},l=e('<h1 id="mybatis自定义类型处理器typehandler" tabindex="-1"><a class="header-anchor" href="#mybatis自定义类型处理器typehandler"><span>MyBatis自定义类型处理器TypeHandler</span></a></h1><p><img src="'+t+`" alt="image-20240320092527345"></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 设置 PreparedStatement 的指定参数。
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">ps</span>        PreparedStatement 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">index</span>     参数在 PreparedStatement 中的位置。
     * <span class="token keyword">@param</span> <span class="token parameter">parameter</span> 要设置的参数值。
     * <span class="token keyword">@param</span> <span class="token parameter">jdbcType</span>  JDBC 类型。这是一个可选参数，可以用来控制设置参数时的行为。
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span> 如果在设置参数时发生 SQL 异常。
     */</span>
    <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从 ResultSet 中获取数据并转换为 Java 类型。
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">rs</span>        ResultSet 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">columnName</span> 要获取的数据的列名。
     * <span class="token keyword">@return</span> 转换后的 Java 类型数据。
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span> 如果在获取数据时发生 SQL 异常。
     */</span>
    <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从 ResultSet 中获取数据并转换为 Java 类型。
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">rs</span>         ResultSet 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">columnIndex</span> 要获取的数据的列索引。
     * <span class="token keyword">@return</span> 转换后的 Java 类型数据。
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span> 如果在获取数据时发生 SQL 异常。
     */</span>
    <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从 CallableStatement 中获取数据并转换为 Java 类型。
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">cs</span>         CallableStatement 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">columnIndex</span> 要获取的数据的列索引。
     * <span class="token keyword">@return</span> 转换后的 Java 类型数据。
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span> 如果在获取数据时发生 SQL 异常。
     */</span>
    <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span>配置方式</span></a></h2><ol><li><p>在Mapper.xml中声明(应用<strong>单个</strong>指定字段)</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BaseResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.xxx.EntiyDto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enum1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INTEGER<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enum1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.xxx.handler.IntegerArrayTypeHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在springboot的yml配置文件中设置类型处理器所在的<strong>包名</strong>，不是处理器路径（应用到<strong>全局</strong>）</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">type-handlers-package</span><span class="token punctuation">:</span> com.xxx.handler 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实体类指定类型处理器。<strong>必须在实体类上加<code>@TableName(autoResultMap = true)</code>,否则不生效</strong></p></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>autoResultMap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考材料：</p><p>https://juejin.cn/post/7320211683871801363?utm_source=gold_browser_extension</p>`,8),c=[l];function o(i,r){return a(),s("div",null,c)}const d=n(p,[["render",o],["__file","MyBatis自定义类型处理器TypeHandler.html.vue"]]),m=JSON.parse('{"path":"/database/mybatis/MyBatis%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E5%99%A8TypeHandler.html","title":"MyBatis自定义类型处理器TypeHandler","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"配置方式","slug":"配置方式","link":"#配置方式","children":[]}],"git":{"updatedTime":1711264111000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"database/mybatis/MyBatis自定义类型处理器TypeHandler.md"}');export{d as comp,m as data};
