import{_ as a,o as e,c as l,a as i}from"./app-oJgUVX7T.js";const s="/assets/image-20240422102346431-CntS5KB7.png",n={},t=i(`<h1 id="gc调优" tabindex="-1"><a class="header-anchor" href="#gc调优"><span>GC调优</span></a></h1><p>目的：GC时间够少, GC次数够少。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 开启简单日志</span>
<span class="token parameter variable">-XX:+PrintGC</span>
<span class="token comment"># 详细日志</span>
<span class="token parameter variable">-XX:+PrintGCDetails</span>
<span class="token comment"># 开启带时间戳的日志</span>
<span class="token parameter variable">-XX:+PrintGCTimeStamps</span>
<span class="token comment"># 日志格式化，时间格式化会有性能损耗，但GC的日志不算很多</span>
XX:+PrintGCDateStamps
<span class="token comment"># 设置GC日志路径，如果设置的路径并不存在，JVM启动后并不会输出日志</span>
<span class="token parameter variable">-Xloggc:filename</span> 
<span class="token comment"># 设置滚动日志</span>
<span class="token parameter variable">-XX:NumberOfGCLogFiles</span><span class="token operator">=</span>N 设置文件数量
<span class="token parameter variable">-XX:GCLogFileSize</span><span class="token operator">=</span>N设置每个GC日志文件大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+s+'" alt="image-20240422102346431"></p><ul><li><p>新生代 GC（Minor GC）： 指发生新生代的的垃圾收集动作，Minor GC 非常频繁，回收速度一般也比较快。一般单次耗时 <strong>&lt;</strong> 50ms，频率10秒以上，认为比较健康。</p></li><li><p>老年代 GC（Major GC/Full GC）： 指发生在老年代的 GC，出现了 Major GC 经常会伴随至少一次的 Minor GC（并非绝对），Major GC 的速度一般会比 Minor GC 的慢 10 倍以上。一般单次耗时 <strong>&lt;</strong> 1秒，频率10分钟以上，认为比较健康。</p></li></ul><blockquote><p>https://gceasy.io/ GC日志分析</p></blockquote><h2 id="性能监控故障处理" tabindex="-1"><a class="header-anchor" href="#性能监控故障处理"><span>性能监控故障处理</span></a></h2><p>CPU 100%：</p><ol><li>ps -ef | grep 运行的服务名字，直接top命令也可以看到各个进程CPU使用情况</li><li>top -Hp PID 显示进程PID下所有的线程，定位到消耗CPU最高的线程 top -H -p 特定进程中的线程</li><li>将线程ID转换成16进制 printf &#39;%x\\n&#39;</li><li>jstack 导出进程当前时刻的线程快照到文件</li><li>最后用 cat 命令结合 grep 命令对十六进制线程 PID 进行过滤，可以定位到出现问题的代码</li></ol><h2 id="常规属性" tabindex="-1"><a class="header-anchor" href="#常规属性"><span>常规属性</span></a></h2><ol><li><p>-Xms 5m设置JVM初始堆为5M，-Xmx 5m 设置JVM最大堆为5M。-Xms跟-Xmx值一样时可以避免每次垃圾回收完成后JVM重新分配内存</p></li><li><p>-Xmn 2g:设置年轻代大小为2G，一般默认为整个堆区的1/3 ~ 1/4。<strong>-Xss</strong>每个线程栈空间设置</p></li><li><p>-XX:SurvivorRatio，设置年轻代中Eden区与Survivor区的比值，默认=8，比值为8:1:1</p></li><li><p>-XX:+HeapDumpOnOutOfMemoryError： 当JVM发生OOM时，自动生成DUMP文件</p></li><li><p>-XX:PretenureSizeThreshold：当创建的对象超过指定大小时，直接把对象分配在老年代。</p></li><li><p>-XX:MaxTenuringThreshold：设定对象在Survivor区最大年龄阈值，超过阈值转移到老年代，默认15</p></li><li><p>开启GC日志对性能影响很小且能帮助我们定位问题 -XX:+PrintGCTimeStamps - XX:+PrintGCDetails -Xloggc:gc.log日志位置</p></li></ol><h2 id="监控和故障处理工具" tabindex="-1"><a class="header-anchor" href="#监控和故障处理工具"><span>监控和故障处理工具</span></a></h2><ul><li><p>jps 查看所有JAVA进程</p></li><li><p>jstat 监视虚拟机各种运行状态信息</p></li><li><p>jinfo 实时查看和修改虚拟机参数，不需要重启</p></li><li><p>jmap 生成堆转储快照dump</p></li><li><p>jhat 分析dump文件</p></li><li><p>jstack 生成虚拟机当前时刻的线程快照</p></li></ul><h2 id="可视化工具" tabindex="-1"><a class="header-anchor" href="#可视化工具"><span>可视化工具</span></a></h2><ul><li><p>Jconsole</p></li><li><p>Visual VM 功能的集合，比Jprofiler强太多</p></li></ul>',15),p=[t];function r(o,c){return e(),l("div",null,p)}const d=a(n,[["render",r],["__file","GC调优.html.vue"]]),v=JSON.parse('{"path":"/java/jvm/GC%E8%B0%83%E4%BC%98.html","title":"GC调优","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"性能监控故障处理","slug":"性能监控故障处理","link":"#性能监控故障处理","children":[]},{"level":2,"title":"常规属性","slug":"常规属性","link":"#常规属性","children":[]},{"level":2,"title":"监控和故障处理工具","slug":"监控和故障处理工具","link":"#监控和故障处理工具","children":[]},{"level":2,"title":"可视化工具","slug":"可视化工具","link":"#可视化工具","children":[]}],"git":{"updatedTime":1715331156000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"java/jvm/GC调优.md"}');export{d as comp,v as data};
