import{_ as e,o as t,c as a,a as o}from"./app-oJgUVX7T.js";const c={},i=o('<h1 id="_2024年05月10日" tabindex="-1"><a class="header-anchor" href="#_2024年05月10日"><span>2024年05月10日</span></a></h1><ul><li><p>HashMap 的经典设计有什么</p></li><li><p>jdk 线程池与 tomcat 线程池对比</p><p>对比 Tomcat 线程池和 JDK 线程池，一个是线程数未达到最大线程数之前，优先创建线程执行任务，另一个是队列未满，优先让任务排队，总体而言tomcat线程池更适用于 IO 密集型应用场景，而对于CPU密集型任务，<code>ThreadPoolExecutor </code>是更通用和灵活性更高一些</p></li><li><p>线程池原理</p><p>线程池做的工作主要是控制运行的线程数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其它线程执行完毕，再从队列中取出任务来执行。</p><p>他的主要特点为：线程复用、控制最大并发数、管理线程。</p></li></ul>',2),l=[i];function r(n,s){return t(),a("div",null,l)}const _=e(c,[["render",r],["__file","2024年05月10日.html.vue"]]),m=JSON.parse('{"path":"/Interview/2024%E5%B9%B405%E6%9C%8810%E6%97%A5.html","title":"2024年05月10日","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1715597425000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":2}]},"filePathRelative":"Interview/2024年05月10日.md"}');export{_ as comp,m as data};
