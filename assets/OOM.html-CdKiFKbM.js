import{_ as l,o as a,c as i,a as e}from"./app-oJgUVX7T.js";const r={},p=e('<h1 id="oom" tabindex="-1"><a class="header-anchor" href="#oom"><span>OOM</span></a></h1><ol><li>堆溢出</li><li>栈溢出</li><li>方法区溢出</li><li>直接内存溢出</li></ol><h2 id="堆溢出" tabindex="-1"><a class="header-anchor" href="#堆溢出"><span>堆溢出</span></a></h2><p>在 Java 堆中没有内存完成实例分配，并且堆也无法再扩展时， Java 虚拟机将会抛出 OutOfMemoryError 异常。</p><p>溢出原因：</p><ul><li>应用程序保存了无法被GC回收的对象</li></ul><p>排查解决思路：</p><ol><li><p>查找关键字报错信息 java.lang.OutOfMemoryError: Java heap space</p></li><li><p>使用内存映像分析工具 Jprofiler，对 Dump 出来的堆储存快照进行分析，分析清楚是内存泄漏还是内存溢出</p></li><li><p>如果是内存泄漏，可进一步通过工具查看泄漏对象到 GC Roots 的引用链，修复应用程序中的内存泄漏</p></li><li><p>如果不存在泄漏，先检查代码是否有死循环，递归等，再考虑用 -Xmx 增加堆大小</p></li></ol><h2 id="栈溢出" tabindex="-1"><a class="header-anchor" href="#栈溢出"><span>栈溢出</span></a></h2><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常； 如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出 OutOfMemoryError 异常。</p><p>溢出原因：</p><ol><li>在单个线程下，无论是由于栈帧太大还是虚拟机栈容量太小，当内存无法分配的时候，抛出StackOverflowError 异常</li><li>不断地建立线程的方式会导致内存溢出</li></ol><p>排查解决思路：</p><ol><li><p>查找关键报错信息，确定是 StackOverflowError 还是 OutOfMemoryError</p></li><li><p>如果是 StackOverflowError，检查代码是否递归调用方法等</p></li><li><p>如果是 OutOfMemoryError，检查是否有死循环创建线程等，通过-Xss 降低的每个线程栈大小的容量</p></li></ol><h2 id="方法区溢出" tabindex="-1"><a class="header-anchor" href="#方法区溢出"><span>方法区溢出</span></a></h2><p>运行时产生大量的类，填满方法区，或者当常量池无法再申请到内存时会抛出 OutOfMemoryError。</p><p>异常溢出原因：</p><ul><li><p>使用CGLib 生成了大量的代理类，导致方法区被撑爆</p></li><li><p>在Java7 之前，频繁的错误使用 String.intern() 方法</p></li></ul><p>排查解决思路：</p><ol><li><p>检查是否使用 CGLib 生成了大量的代理类</p></li><li><p>检查代码是否频繁错误得使用 String.intern() 方法</p></li></ol><h2 id="直接内存溢出" tabindex="-1"><a class="header-anchor" href="#直接内存溢出"><span>直接内存溢出</span></a></h2><p>直接内存也被频繁地使用，也可能导致OOM。</p><p>溢出原因：</p><ol><li><p>本机直接内存的分配虽然不会受到 Java 堆大小的限制，但是受到本机总内存大小限制</p></li><li><p>NIO程序中，使用 ByteBuffer.allocteDirect(capability) 分配的是直接内存，可能导致直接内存溢出</p></li><li><p>直接内存由 -XX:MaxDirectMemorySize 指定，如果不指定，则默认与Java堆最大值（-Xmx指定）一样</p></li></ol>',24),o=[p];function t(n,s){return a(),i("div",null,o)}const h=l(r,[["render",t],["__file","OOM.html.vue"]]),O=JSON.parse('{"path":"/java/jvm/OOM.html","title":"OOM","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"堆溢出","slug":"堆溢出","link":"#堆溢出","children":[]},{"level":2,"title":"栈溢出","slug":"栈溢出","link":"#栈溢出","children":[]},{"level":2,"title":"方法区溢出","slug":"方法区溢出","link":"#方法区溢出","children":[]},{"level":2,"title":"直接内存溢出","slug":"直接内存溢出","link":"#直接内存溢出","children":[]}],"git":{"updatedTime":1715331156000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"java/jvm/OOM.md"}');export{h as comp,O as data};
