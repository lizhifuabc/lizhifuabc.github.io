import{_ as l,o as i,c as e,a as o}from"./app-oJgUVX7T.js";const a={},n=o('<h1 id="并发系统设计" tabindex="-1"><a class="header-anchor" href="#并发系统设计"><span>并发系统设计</span></a></h1><p>并发系统设计简单描述。</p><h2 id="数据库层面" tabindex="-1"><a class="header-anchor" href="#数据库层面"><span>数据库层面</span></a></h2><ol><li>分库分表 <ol><li>分库：是为了解决数据库连接资源不足问题，和磁盘IO的性能瓶颈问题。</li><li>分表：是为了解决单表数据量太大，sql语句查询数据时，即使走了索引也非常耗时问题。此外还可以解决消耗cpu资源问题。</li></ol></li><li>读写分离 <ol><li>二八原则：一个系统当中可能有80%是读数据请求，另外20%是写数据请求。</li><li>一主多从架构</li></ol></li><li>索引 <ol><li>insert数据时，需要给索引分配额外的资源，对insert的性能有一定的损耗。</li><li>可以将多个单个索引，改成一个联合索引。</li><li>使用explain关键字，查询SQL语句的执行计划，看看哪些走了索引，哪些没有走索引。</li><li>可以使用force index来强制查询sql走某个索引。</li></ol></li></ol><h2 id="编码层面" tabindex="-1"><a class="header-anchor" href="#编码层面"><span>编码层面</span></a></h2><ol><li>批处理 <ol><li>提供批量查询接口</li><li>根据实际情况，建议控制每次请求的记录条数在500以内。</li></ol></li><li>限流：nginx、redis <ol><li>对同一ip限流</li><li>对接口限流</li></ol></li><li>缓存 <ol><li>二级缓存：基于应用服务器的内存缓存。</li><li>分布式缓存：Redis、Memcached等。</li></ol></li><li>异步 <ol><li>线程池</li><li>mq（线程池消费消息）</li></ol></li><li>其他： <ol><li>验证码</li></ol></li></ol><h2 id="架构层面" tabindex="-1"><a class="header-anchor" href="#架构层面"><span>架构层面</span></a></h2><ol><li><p>集群</p><ol><li>应用服务器集群、数据库集群、中间件集群、文件服务器集群</li><li>例如 Redis，提供三组机器，没组都是单独的普通的master/slave模式，通过代码进行数据路由。</li></ol></li><li><p>负载均衡：轮询、weight权重、ip hash（可解决Session共享）、最少连接数、最短响应时间等等。</p><ol><li>linux下有<code>Nginx</code>、<code>LVS</code>、<code>Haproxy</code>等服务可以提供负载均衡服务。</li><li>在SpringCloud微服务架构中，大部分使用的负载均衡组件就是<code>Ribbon</code>、<code>OpenFegin</code>或<code>SpringCloud Loadbalancer</code>。</li><li>硬件方面，可以使用<code>F5</code>实现负载均衡。</li></ol></li><li><p>前端项目：</p><ol><li>页面静态化</li><li>CDN加速</li></ol></li><li><p>高可用</p><ol><li>服务降级</li><li>故障转移</li><li>异地多活</li></ol></li></ol><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><ol><li>压测 <ol><li>压测工具：Jemter、LoaderRunnder、Locust等</li></ol></li><li>监控 <ol><li>Prometheus： <code>监控</code> 和 <code>预警</code> 功能</li></ol></li></ol>',10),d=[n];function c(s,t){return i(),e("div",null,d)}const h=l(a,[["render",c],["__file","并发系统设计.html.vue"]]),p=JSON.parse('{"path":"/design/distributed/%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html","title":"并发系统设计","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"数据库层面","slug":"数据库层面","link":"#数据库层面","children":[]},{"level":2,"title":"编码层面","slug":"编码层面","link":"#编码层面","children":[]},{"level":2,"title":"架构层面","slug":"架构层面","link":"#架构层面","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"updatedTime":1694156727000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"design/distributed/并发系统设计.md"}');export{h as comp,p as data};
