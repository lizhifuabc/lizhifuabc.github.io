import{_ as n,o as s,c as a,a as e}from"./app-oJgUVX7T.js";const l="/assets/image-20230905215630297-CkiAOV2P.png",t="/assets/image-20230905215653310-D68-GvI8.png",i="/assets/image-20230905215704095-COy1aeFd.png",p="/assets/image-20230905215719877-IKkGN5fM.png",o={},c=e('<h1 id="秒杀活动设计" tabindex="-1"><a class="header-anchor" href="#秒杀活动设计"><span>秒杀活动设计</span></a></h1><p>秒杀的业务特点：</p><ol><li>折扣价格。商品或服务通常以折扣价格出售，这吸引了许多消费者。</li><li>限定时间。通常在特定时间段内进行，消费者只能在这段时间内购买商品或服务。</li><li>限定数量。商品或服务的数量通常是有限的，消费者需要在限定时间内抢购，以免错过机会。</li><li>快速购买。通常具有快速购买功能，消费者可以快速浏览商品或服务，并在几秒钟内完成购买。</li><li>高并发访问。通常会吸引大量消费者，因此秒杀系统需要能够应对高并发访问，保证数据安全和系统可靠性。</li></ol><p>秒杀的系统特点：</p><ol><li>瞬时并发量非常高：瞬间并发峰值非常高。</li><li>读多写少：库存的查询访问数量远远大于商品的购买数量。</li></ol><h2 id="业务思路" tabindex="-1"><a class="header-anchor" href="#业务思路"><span>业务思路</span></a></h2><p><strong>首先有个核心的宗旨：秒杀的本质不是卖商品，而是一个人气，说白了就是没必要那么认真</strong></p><ol><li>预约秒杀，只有预约的人才能参与秒杀</li><li>指定秒杀数量，其实就是假秒杀，例如 100% 的流量，随机返回一部分直接失败（记得后端返回），无所谓卖不卖的完，只要不超卖就可以了。</li></ol><p><img src="'+l+'" alt="image-20230905215630297"></p><h2 id="常见技术方案" tabindex="-1"><a class="header-anchor" href="#常见技术方案"><span>常见技术方案</span></a></h2><p>为了应对这种高流量和高并发的情况，秒杀系统通常需要采用特殊的技术和方案来保证系统的稳定性和性能。</p><ul><li>缓存技术，例如 Redis，来存储商品的库存信息，并通过读取缓存来提高系统的访问速度。</li><li>消息队列技术，例如 RabbitMQ，来处理大量用户的购买请求，并通过异步处理来减轻系统的压力。</li><li>分布式技术，例如分布式数据库和分布式服务架构，来提高系统的可扩展性和容错能力。</li><li>安全技术，例如双重验证和授权认证，来防止恶意用户的攻击和欺诈行为。</li></ul><h2 id="流程分析" tabindex="-1"><a class="header-anchor" href="#流程分析"><span>流程分析</span></a></h2><p><img src="'+t+'" alt="image-20230905215653310"></p><p>其实在三个流程中，只有秒杀是并发量是最大的。场景的处理方式是把下单做成异步的。</p><p><img src="'+i+'" alt="image-20230905215704095"></p><p>这种流程看着是没有什么问题，但是实际的情况是下单是没有什么并发的，这样把整个流程给拉长了，可以进行进一步的优化如下：</p><p><img src="'+p+`" alt="image-20230905215719877"></p><h2 id="缓存预热" tabindex="-1"><a class="header-anchor" href="#缓存预热"><span>缓存预热</span></a></h2><p>秒杀的场景是 读&gt;写，避免了因为缓存中没有数据而降低系统性能的问题。</p><ol><li>定时任务将 状态为已发布且未开始的秒杀活动、秒杀商品写入redis缓存；</li><li>扫描已过期的秒杀活动，移除缓存。</li></ol><h2 id="限流操作" tabindex="-1"><a class="header-anchor" href="#限流操作"><span>限流操作</span></a></h2><ol><li>同一ip限流</li><li>同一用户限流</li><li>接口请求次数限流</li><li>验证码限流，建议使用滑块验证码，安全性较高。</li></ol><h2 id="扣减库存" tabindex="-1"><a class="header-anchor" href="#扣减库存"><span>扣减库存</span></a></h2><ol><li>数据库：保障不超卖的最终手段</li></ol><p>基于数据库的乐观锁，这样会少一次数据库查询，而且能够天然的保证数据操作的原子性。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateSkillRemaining<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        update
            t_skill_goods
        set
            version = version + 1,
            skill_remaining = skill_remaining - 1
        where
            id = #{id}
            and skill_remaining &gt; 0
            and version = #{version}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Redis lua 脚本扣减库存</li></ol><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">-- 先判断商品id是否存在，如果不存在则直接返回</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;exists&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token keyword">local</span> stock <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">-- 获取该商品id的库存，判断库存如果是-1，则直接返回，表示不限制库存</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
        <span class="token comment">-- 无库存限制</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token comment">-- 如果库存大于0，则扣减库存。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
        redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;incrby&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">-- 返回剩余库存数</span>
        <span class="token keyword">return</span> stock <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token comment">-- 如果库存等于0，是直接返回，表示库存不足。</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token comment">-- 缓存不存在</span>
<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),r=[c];function d(u,k){return s(),a("div",null,r)}const v=n(o,[["render",d],["__file","秒杀活动设计.html.vue"]]),b=JSON.parse('{"path":"/design/business/%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E8%AE%BE%E8%AE%A1.html","title":"秒杀活动设计","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"业务思路","slug":"业务思路","link":"#业务思路","children":[]},{"level":2,"title":"常见技术方案","slug":"常见技术方案","link":"#常见技术方案","children":[]},{"level":2,"title":"流程分析","slug":"流程分析","link":"#流程分析","children":[]},{"level":2,"title":"缓存预热","slug":"缓存预热","link":"#缓存预热","children":[]},{"level":2,"title":"限流操作","slug":"限流操作","link":"#限流操作","children":[]},{"level":2,"title":"扣减库存","slug":"扣减库存","link":"#扣减库存","children":[]}],"git":{"updatedTime":1693922354000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"design/business/秒杀活动设计.md"}');export{v as comp,b as data};
