import{_ as n,o as a,c as s,a as p}from"./app-oJgUVX7T.js";const t={},e=p(`<h1 id="阅读源码到底有没有没有意义" tabindex="-1"><a class="header-anchor" href="#阅读源码到底有没有没有意义"><span>阅读源码到底有没有没有意义</span></a></h1><p>首先我是一个咸鱼，对技术有一些热爱，也喜欢看一些优秀代码的设计。没有啥很高的追求。</p><p>今天面试了一家公司，基本的面试流程，就是介绍，然后开始问ConcurrentHashMap、HashMap、Spring 启动流程等等，本人是一个不喜欢背诵八股文的，佛系面试，差不多得了，所以面试的结果可想而知，所以又一次对源码阅读产生了疑问，所以记录下来。</p><p>我把阅读源码分为了几个阶段：</p><ol><li>阅读 API ，可以不认为是阅读源码的阶段。</li><li>学习优秀的设计，看看别人是怎么写代码的。</li><li>为了面试，不知道什么时候一个 HashMap 会被问到烂，到目前为止我都没背过，源码倒是阅读过很多次，但是记不住。。。</li></ol><p>所以想从一些高频面试题中试图找到答案：</p><h2 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap"><span>HashMap</span></a></h2><p>HashMap 因为优秀的设计和使用的范围之大，属</p><p>这个阶段是为了使用，也是必须的阶段，例如你得知道 HashMap 是线程不安全的，ConcurrentHashMap 是线程安全的，具体的使用场景是什么。</p><h2 id="为什么阅读源码" tabindex="-1"><a class="header-anchor" href="#为什么阅读源码"><span>为什么阅读源码</span></a></h2><p>阅读源码如果只是死记硬背，说实话，没有任何意义。但是不死记硬背，面试又通过不了。</p><p>阅读源码或者说阅读API一般分为两个阶段：</p><ul><li>为了使用，例如 HashMap 你应该知道的是它是线程不安全的，这个是必须的，至于为什么不安全，意义在哪？</li><li>为了面试，例如 HashMap 的数据结构，数组+链表，数组+链表+红黑树，说句实话，你知道或者不知道，对于大多数的公司，意义不大，因为不可能让你自己设计一个 HashMap 去使用。</li></ul><p>例如下面这段代码：HashMap 链表到红黑树的转换</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 遍历链表</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历到链表最后一个节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果链表元素个数大于等于TREEIFY_THRESHOLD（8）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
            <span class="token comment">// 红黑树转换（并不会直接转换成红黑树）</span>
            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你读一遍和读十几遍的意义，在于面试的时候能够回答的好一点，其他的，才疏学浅，真不知道有什么意义。难道你会控制 HashMap 的初始值？</p>`,16),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","2023年10月25日阅读源码没有意义.html.vue"]]),k=JSON.parse('{"path":"/started/2023%E5%B9%B410%E6%9C%8825%E6%97%A5%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89.html","title":"阅读源码到底有没有没有意义","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[]},{"level":2,"title":"为什么阅读源码","slug":"为什么阅读源码","link":"#为什么阅读源码","children":[]}],"git":{"updatedTime":1698818603000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"started/2023年10月25日阅读源码没有意义.md"}');export{r as comp,k as data};
