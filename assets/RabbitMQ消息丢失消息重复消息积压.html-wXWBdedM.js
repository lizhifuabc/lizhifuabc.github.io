import{_ as n,o as s,c as a,a as e}from"./app-oJgUVX7T.js";const t={},p=e(`<h1 id="rabbitmq实战-消息丢失、消息重复、消息积压" tabindex="-1"><a class="header-anchor" href="#rabbitmq实战-消息丢失、消息重复、消息积压"><span>RabbitMQ实战:消息丢失、消息重复、消息积压</span></a></h1><p>RabbitMQ避免消息丢失的方法：</p><ol><li>消息确认机制</li><li>手动签收机制</li></ol><h2 id="消息确认机制" tabindex="-1"><a class="header-anchor" href="#消息确认机制"><span>消息确认机制</span></a></h2><p>主要是生产者使用的机制，用来确认消息是否被成功消费。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
    <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
        <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.x.x<span class="token punctuation">:</span>xxxx
        <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /
        <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
        <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
        <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token key atrule">publisher-confirms</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 消息成功确认</span>
        <span class="token key atrule">publisher-returns</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 消息失败确认</span>
        <span class="token key atrule">template</span><span class="token punctuation">:</span> 
            <span class="token key atrule">mandatory</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 手动签收机制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现RabbitTemplate.ConfirmCallback, RabbitTemplate.ReturnCallback这两个接口的方法后，就可以针对性地进行消息确认的日志记录，之后做进一步的消息发送补偿，以达到接近100%投递的目的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQSender</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">,</span> 
<span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span> <span class="token punctuation">{</span>
    
    <span class="token doc-comment comment">/**
     * 发送消息
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 发送消息</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> xx<span class="token punctuation">,</span> order<span class="token punctuation">,</span> xx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 成功接收后的回调
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
        <span class="token comment">// 如果成功接收了，这里可以对日志表的消息收发状态做更新。</span>
        <span class="token comment">// ....</span>
        
    <span class="token punctuation">}</span>
      
    <span class="token doc-comment comment">/**
     * 失败后的回调
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
        <span class="token comment">// 如果失败了，这里可以对日志表的消息收发状态做更新，之后通过任务调度去补偿发送。</span>
        <span class="token comment">// ....</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息签收机制" tabindex="-1"><a class="header-anchor" href="#消息签收机制"><span>消息签收机制</span></a></h2><p>RabbitMQ的消息是自动签收的，你可以理解为快递签收了，那么这个快递的状态就从发送变为已签收，唯一的区别是快递公司会对物流轨迹有记录，而MQ签收后就从队列中删除了。</p><p>企业级开发中，RabbitMQ我们基本都开启手动签收方式，这样可以有效避免消息的丢失。</p><p>前文中已经在生产者开启了手动签收机制，那么作为消费方，也要设置手动签收。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
    <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
        <span class="token key atrule">address</span><span class="token punctuation">:</span> 192.168.x.x<span class="token punctuation">:</span>xxxx
        <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /
        <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
        <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
        <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token key atrule">listener</span><span class="token punctuation">:</span> 
            <span class="token key atrule">simple</span><span class="token punctuation">:</span> 
                <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 并发数量</span>
                <span class="token key atrule">max-concurrency</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 最大并发数量</span>
                <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual <span class="token comment"># 开启手动签收</span>
                <span class="token key atrule">prefetch</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 限制每次只消费一个(一个线程)，上面配置5，也就是能一次接收5个</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费监听时，手动签收就一行代码，伪代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOrderMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> 
<span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">)</span> <span class="token keyword">long</span> tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// ....</span>
    
    <span class="token comment">// 手动签收</span>
    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息丢失" tabindex="-1"><a class="header-anchor" href="#消息丢失"><span>消息丢失</span></a></h2><p>消息丢失的原因无非有三种：</p><ol><li>消息发出后，中途网络故障，服务器没收到；</li><li>消息发出后，服务器收到了，还没持久化，服务器宕机；</li><li>消息发出后，服务器收到了，消费方还未处理业务逻辑，服务却挂掉了，而消息也自动签收，等于啥也没干。</li></ol><p>这三种情况，(1) 和 (2)是由于生产方未开启消息确认机制导致，(3)是由于消费方未开启手动签收机制导致。</p><p>解决方案：</p><ol><li>生产方发送消息时，要try...catch，在catch中捕获异常，并将MQ发送的关键内容记录到日志表中，日志表中要有消息发送状态，若发送失败，由定时任务定期扫描重发并更新状态；</li><li>生产方publisher必须要加入确认回调机制，确认成功发送并签收的消息，如果进入失败回调方法，就修改数据库消息的状态，等待定时任务重发；</li><li>消费方要开启手动签收ACK机制，消费成功才将消息移除，失败或因异常情况而尚未处理，就重新入队。</li></ol><p>其实这就是前面阐述两个概念时已经讲过的内容，也是接近100%消息投递的企业级方案之一，主要目的就是为了解决消息丢失的问题。</p><h2 id="消息重复" tabindex="-1"><a class="header-anchor" href="#消息重复"><span>消息重复</span></a></h2><ol><li>消息消费成功，事务已提交，签收时结果服务器宕机或网络原因导致签收失败，消息状态会由unack转变为ready，重新发送给其他消费方；</li><li>消息消费失败，由于retry重试机制，重新入队又将消息发送出去。</li></ol><p>解决方案：</p><ol><li>消费方业务接口做好幂等，推荐做法，业务方法幂等这是最直接有效的方式</li><li>消息日志表保存MQ发送时的唯一消息ID，消费方可以根据这个唯一ID进行判断避免消息重复；</li><li>消费方的Message对象有个getRedelivered()方法返回Boolean，为TRUE就表示重复发送过来的。</li></ol><h2 id="消息积压" tabindex="-1"><a class="header-anchor" href="#消息积压"><span>消息积压</span></a></h2><ol><li>消费方的服务挂掉，导致一直无法消费消息；</li><li>消费方的服务节点太少，导致消费能力不足，从而出现积压，这种情况极可能就是生产方的流量过大导致。</li></ol><p>解决方案：</p><ol><li>既然消费能力不足，那就扩展更多消费节点，提升消费能力；</li><li>建立专门的队列消费服务，将消息批量取出并持久化，之后再慢慢消费。</li></ol><p>(1)就是最直接的方式，也是消息积压最常用的解决方案，但有些企业考虑到服务器成本压力，会选择第（2）种方案进行迂回，先通过一个独立服务把要消费的消息存起来，比如存到数据库，之后再慢慢处理这些消息即可。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ol><li><p>消息丢失、消息重复、消息积压三个问题中，实际上主要解决的还是消息丢失，大部分情况下遇不到消息积压的场景，幂等也比较容易实现，所以几乎不存在消息重复的可能；</p></li><li><p>消息丢失的最常见方案就是定时任务补偿，不论是SOA还是微服务的架构，必然会有分布式任务调度的存在，自然也就成为MQ最直接的补偿方式，如果MQ一定要实现100%投递，这种是最普遍的方案。</p><p>实际上不推荐中小企业使用该方案，因为凭空增加维护成本，而且没有一定规模的项目完全没必要，大家都小看了RabbitMQ本身的性能，比如我们公司，支撑一个三甲医院，也就是三台8核16G服务器的集群，上线至今3年毫无压力；</p></li><li><p>生产者消息确认机制ConfirmCallback和ReturnCallback，这种机制十分降低MQ性能。</p><p>可以建立后台管理实现人工补偿，通过识别业务状态判断消费方是否处理了业务逻辑，毕竟这种情况都是少数，性能和运维成本，选择性能；</p></li><li><p>RabbitMQ一定要开启手动签收；</p></li><li><p>手动签收方式：不论业务逻辑是否处理成功，最终都要将消息手动签收。</p></li></ol><p>举例：</p><p><strong>不科学的用法</strong>：在处理完业务逻辑后再手动签收，否则不签收，就好比客人进店了你得买东西，否则不让走。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOrderMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> 
<span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">)</span> <span class="token keyword">long</span> tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 处理业务</span>
    <span class="token function">doBusiness</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 手动签收</span>
    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>科学的用法</strong>：不论业务逻辑是否处理成功，最终都要将消息手动签收，MQ的使命不是保证客人进店了必须消费，不消费就不让走，而是客人能进来就行，哪怕是随便看看也算任务完成。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOrderMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> 
<span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">)</span> <span class="token keyword">long</span> tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理业务</span>
        <span class="token function">doBusiness</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 记录日志，通过后台管理或其他方式人工处理失败的业务。</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// 手动签收</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能有人会问你这样不是和自动签收没区别吗，NO，你要知道如果自动签收，出现消息丢失你连记录日志的可能都没有。</p><p>另外，为什么一定要这么做，因为MQ是中间件，本身就是辅助工具，就是一个滴滴司机，保证给你送到顺便说个再见就行，没必要还下车给你搬东西。</p><p>如果强加给MQ过多压力，只会造成本身业务的畸形。我们使用MQ的目的就是解耦和转发，不再做多余的事情，保证MQ本身是流畅的、职责单一的即可。</p><p>本篇主要讲了RabbitMQ的三种常见问题及解决方案，同时分享了一些作者本人工作中使用的心得，我想网上是很难找到的，如果哪一天用到了，不妨再打开看看，也许能避免一些生产环境可能出现的问题。</p><p>我总结下来就是三点：</p><p>1）、消息100%投递会增加运维成本，中小企业视情况使用，非必要不使用；</p><p>2）、消息确认机制影响性能，非必要不使用；</p><p>3）、消费者先保证消息能签收，业务处理失败可以人工补偿。</p><p>工作中怕的永远不是一个技术不会使用，而是遇到问题不知道有什么解决思路。</p>`,47),l=[p];function i(c,o){return s(),a("div",null,l)}const d=n(t,[["render",i],["__file","RabbitMQ消息丢失消息重复消息积压.html.vue"]]),r=JSON.parse('{"path":"/mq/rabbitmq/RabbitMQ%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E6%B6%88%E6%81%AF%E9%87%8D%E5%A4%8D%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B.html","title":"RabbitMQ实战:消息丢失、消息重复、消息积压","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"消息确认机制","slug":"消息确认机制","link":"#消息确认机制","children":[]},{"level":2,"title":"消息签收机制","slug":"消息签收机制","link":"#消息签收机制","children":[]},{"level":2,"title":"消息丢失","slug":"消息丢失","link":"#消息丢失","children":[]},{"level":2,"title":"消息重复","slug":"消息重复","link":"#消息重复","children":[]},{"level":2,"title":"消息积压","slug":"消息积压","link":"#消息积压","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1698818603000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"mq/rabbitmq/RabbitMQ消息丢失消息重复消息积压.md"}');export{d as comp,r as data};
