import{_ as e,o as l,c as i,a as s}from"./app-oJgUVX7T.js";const a={},t=s('<h1 id="redis使用建议" tabindex="-1"><a class="header-anchor" href="#redis使用建议"><span>Redis使用建议</span></a></h1><h2 id="键值" tabindex="-1"><a class="header-anchor" href="#键值"><span>键值</span></a></h2><ol><li>key 尽量保持简洁性、可读性、可管理性</li></ol><p>​ 在保证语义的前提下，控制 key 的长度；以业务名 (或数据库名) 为前缀 (防止 key 冲突)，用冒号分隔，比如业务名：表名:id；不要包含特殊字符。</p><ol start="2"><li>防止 bigkey，防止网卡流量过高、慢查询</li></ol><p>​ String 类型控制在 10KB 以内，hash、list、set、zset 元素个数不要超过 5000</p><ol start="3"><li>避免热点 key</li></ol><p>​ 热 key 会导致数据倾斜，以及单节点压力过大。建议业务侧将热 key 打散</p><ol start="4"><li>控制 key 生命周期</li></ol><p>​ 缓存不是垃圾桶，最好对 key 都设置 ttl，并且将 key 的 ttl 打散，避免 key 集中过期。</p><h2 id="命令使用" tabindex="-1"><a class="header-anchor" href="#命令使用"><span>命令使用</span></a></h2><ol><li><p>慎用全量操作命令</p><ol><li>禁用 <code>keys *</code> 命令，尽量不使用 hgetall、smembers 等命令。</li><li>在获取 key 下的多个元素时，使用相应的 scan 命令，一次获取少量元素，分多次获取，建议一次 scan 不要超过 200 个</li></ol></li><li><p>控制 mset、mget、hmset、hmget、scan、\\range 等命令单次操作元素数量，建议不要超过 200</p></li><li><p>控制 pipeline 中命令的数量，建议要超过 100</p></li><li><p>redis 删除 key 时，不要用 del 命令，使用 unlink 命令</p></li></ol><p>​ del 大 key 会直接导致 redis 卡住。使用 unlink 命令可以异步删除 key，不会对 redis 主线程产生影响，因此也不会影响业务流量</p><ol start="5"><li><p>set 和 expire 命令合并成 setex 命令，减少服务端写压力**</p></li><li><p>evalsha 代替 eval</p></li></ol><p>​ redis-cluster 集群中使用 evalsha 代替 eval，减少网络 IO，同时也减小 redis 网络 IO 压力提高性能</p>',15),n=[t];function r(o,d){return l(),i("div",null,n)}const c=e(a,[["render",r],["__file","Redis使用建议.html.vue"]]),h=JSON.parse('{"path":"/database/nosql/Redis%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE.html","title":"Redis使用建议","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"键值","slug":"键值","link":"#键值","children":[]},{"level":2,"title":"命令使用","slug":"命令使用","link":"#命令使用","children":[]}],"git":{"updatedTime":1694337389000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"database/nosql/Redis使用建议.md"}');export{c as comp,h as data};
