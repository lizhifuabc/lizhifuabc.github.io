import{_ as e,o as i,c as l,a}from"./app-oJgUVX7T.js";const s={},t=a('<h1 id="redis应用场景" tabindex="-1"><a class="header-anchor" href="#redis应用场景"><span>Redis应用场景</span></a></h1><ol><li>缓存</li><li>分布式锁：基于 Redisson 来实现分布式锁</li><li>限流：通过 Redis + Lua 脚本的方式来实现限流</li><li>消息队列：Redis 自带的 list 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 stream 类型的数据结构更加适合用来做消息队列。它比较类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。</li><li>延时队列：Redisson 内置了延时队列（基于 sorted set 实现的）</li><li>分布式 Session ：利用 string 或者 hash 保存 Session 数据，所有的服务器都可以访问</li><li>通过 bitmap 统计活跃用户、通过 sorted set 维护排行榜</li></ol><h2 id="业务场景" tabindex="-1"><a class="header-anchor" href="#业务场景"><span>业务场景</span></a></h2><p>收集常用业务场景。</p><h2 id="购物车信息" tabindex="-1"><a class="header-anchor" href="#购物车信息"><span>购物车信息</span></a></h2><p>Hash 存储：</p><ul><li>用户 id 为 key</li><li>商品 id 为 field，商品数量为 value</li></ul><p>实际业务可能需要区分商店，此时 field 不能只为 ID</p><h2 id="排行榜" tabindex="-1"><a class="header-anchor" href="#排行榜"><span>排行榜</span></a></h2><p>Redis <code>sorted set</code> 数据结构：适合各种排行榜的场景，比如直播间送礼物的排行榜、朋友圈的微信步数排行榜、王者荣耀中的段位排行榜、话题热度排行榜等等。</p><p>命令: <code>ZRANGE</code> (从小到大排序)、 <code>ZREVRANGE</code> （从大到小排序）、<code>ZREVRANK</code> (指定元素排名)。</p><h2 id="抽奖系统" tabindex="-1"><a class="header-anchor" href="#抽奖系统"><span>抽奖系统</span></a></h2><ul><li><code>SADD key member1 member2 ...</code>：向指定集合添加一个或多个元素。</li><li><code>SPOP key count</code>：随机移除并获取指定集合中一个或多个元素，适合不允许重复中奖的场景。</li><li><code>SRANDMEMBER key count</code> : 随机获取指定集合中指定数量的元素，适合允许重复中奖的场景。</li></ul><h2 id="统计活跃用户" tabindex="-1"><a class="header-anchor" href="#统计活跃用户"><span>统计活跃用户</span></a></h2><p>Bitmap 存储的是连续的二进制数字（0 和 1），通过 Bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 Bitmap 本身会极大的节省储存空间。</p><p>你可以将 Bitmap 看作是一个存储二进制数字（0 和 1）的数组，数组中每个元素的下标叫做 offset（偏移量）。</p><h2 id="统计页面-uv" tabindex="-1"><a class="header-anchor" href="#统计页面-uv"><span>统计页面 UV</span></a></h2><p>HyperLogLog 统计页面 UV 主要需要用到下面这两个命令：</p><ul><li><code>PFADD key element1 element2 ...</code>：添加一个或多个元素到 HyperLogLog 中。</li><li><code>PFCOUNT key1 key2</code>：获取一个或者多个 HyperLogLog 的唯一计数。</li></ul><blockquote><p>https://javaguide.cn/database/redis/redis-questions-01.html</p></blockquote>',20),d=[t];function o(n,c){return i(),l("div",null,d)}const h=e(s,[["render",o],["__file","Redis应用场景.html.vue"]]),p=JSON.parse('{"path":"/database/nosql/Redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"Redis应用场景","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"业务场景","slug":"业务场景","link":"#业务场景","children":[]},{"level":2,"title":"购物车信息","slug":"购物车信息","link":"#购物车信息","children":[]},{"level":2,"title":"排行榜","slug":"排行榜","link":"#排行榜","children":[]},{"level":2,"title":"抽奖系统","slug":"抽奖系统","link":"#抽奖系统","children":[]},{"level":2,"title":"统计活跃用户","slug":"统计活跃用户","link":"#统计活跃用户","children":[]},{"level":2,"title":"统计页面 UV","slug":"统计页面-uv","link":"#统计页面-uv","children":[]}],"git":{"updatedTime":1694337389000,"contributors":[{"name":"拔土豆的程序员","email":"lizhifuabc@163.com","commits":1}]},"filePathRelative":"database/nosql/Redis应用场景.md"}');export{h as comp,p as data};
